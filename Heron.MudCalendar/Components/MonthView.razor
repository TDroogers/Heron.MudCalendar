@namespace Heron.MudCalendar
@using Microsoft.JSInterop
@inherits CalendarViewBase
@inject IJSRuntime JsRuntime

@Render

@code {

    /// <summary>
    /// Renders the month view.
    /// </summary>
    protected virtual RenderFragment Render =>
        @<div class="mud-cal-month-table-holder mud-cal-month-view">
            @RenderHeaderGrid
            @RenderBodyContainer
    </div>;

    /// <summary>
    /// Renders the header of the grid.
    /// </summary>
    protected virtual RenderFragment RenderHeaderGrid =>
        @<div class="mud-cal-grid-header mud-cal-month-grid-header" style="@GridStyle">
            @RenderHeader
    </div>;

    /// <summary>
    /// Renders the container for the main body of the calendar.
    /// </summary>
    protected virtual RenderFragment RenderBodyContainer =>
        @<MudDropContainer
             @ref="_dropContainer"
             T="CalendarItem"
             Items="Calendar.Items.OrderBy(i => i.Start)"
             ItemsSelector="@((item, dropzone) => item.Start.Date.ToString("d") == dropzone)"
             ItemDisabled="@((_) => !Calendar.EnableDragItems)"
             ItemDropped="ItemDropped"
             CanDropClass="mud-cal-month-drop-ok"
             Class="@Classname">
            <ChildContent>
                @RenderBodyGrid
            </ChildContent>
            <ItemRenderer>
                @RenderTemplate(context)
    </ItemRenderer>
    </MudDropContainer>;

    /// <summary>
    /// Renders the header of the component that contains the day names.
    /// </summary>
    protected virtual RenderFragment RenderHeader => __builder =>
    {
        for (var i = 0; i < Columns; i++)
        {
            <div class="mud-cal-month-header" aria-label="@Cells[i].Date.ToString("dddd")">
                @RenderDayTitle(i)
            </div>
        }
    };

    /// <summary>
    /// Renders the day name.
    /// </summary>
    protected virtual RenderFragment RenderDayTitle(int day) => __builder => { __builder.AddContent(1, Cells[day].Date.ToString("ddd")); };

    /// <summary>
    /// Renders the grid that holds the body of the calendar.
    /// </summary>
    protected virtual RenderFragment RenderBodyGrid =>
        @<div class="mud-cal-grid mud-cal-month-grid" style="@GridStyle">
            @RenderBody
    </div>;

    /// <summary>
    /// Renders the main body of the month view.
    /// </summary>
    protected virtual RenderFragment RenderBody => __builder =>
    {
        for (var week = 0; week < Cells.Count / Columns; week++)
        {
            @for (var i = week * Columns; i < (week + 1) * Columns; i++)
            {
                var cell = Cells[i];
                @RenderCellContainer(cell, i)
            }
        }
    };

    /// <summary>
    /// Renders the container for an individual cell.
    /// </summary>
    protected virtual RenderFragment RenderCellContainer(CalendarCell cell, int index) =>
        @<div class="@CellClassname" style="@DayStyle(cell, index)" @onclick="() => OnCellLinkClicked(cell)">
            <MudDropZone T="CalendarItem" Identifier="@cell.Date.Date.ToString("d")" Class="mud-cal-month-dropzone">
                @RenderCell(cell)
    </MudDropZone>
    </div>;

    /// <summary>
    /// Renders an individual cell.
    /// </summary>
    protected virtual RenderFragment RenderCell(CalendarCell cell) => __builder =>
    {
        @RenderCellDayNumber(cell)
        @RenderCellContents(cell)
    };

    /// <summary>
    /// Renders the day number of the cell.
    /// </summary>
    protected virtual RenderFragment RenderCellDayNumber(CalendarCell cell) =>
        @<div class="@DayClassname(cell)">
            @cell.Date.Day
    </div>;

    /// <summary>
    /// Renders the contents of the cell.
    /// </summary>
    protected virtual RenderFragment RenderCellContents(CalendarCell cell) => __builder =>
    {
        foreach (var item in cell.Items)
        {
            @RenderTemplate(item)
        }
    };

    /// <summary>
    /// Renders the CellTemplate with a click handler if required.
    /// </summary>
    protected virtual RenderFragment RenderTemplate(CalendarItem item) => __builder =>
    {
        @if (Calendar.ItemClicked.HasDelegate)
        {
            <div @onclick="() => OnItemClicked(item)" @onclick:stopPropagation="true" class="mud-cal-clickable">
                @CellTemplate(item)
            </div>
        }
        else
        {
            <div>
                @CellTemplate(item)
            </div>
        }
    };

}